error: lifetime may not live long enough
 --> tests/compile_fail/cross_scope_node_tags.rs:8:9
  |
7 |     let node_from_graph1 = graph1.scope_mut(|mut ctx| {
  |                                              -------- return type of closure is NodeTag<'2, NodeIx>
  |                                              |
  |                                              has type `gotgraph::graph::Context<'1, &mut gotgraph::vec_graph::VecGraph<i32, &str>>`
8 |         ctx.add_node(42)
  |         ^^^^^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'2`
  |
  = note: requirement occurs because of the type `NodeTag<'_, NodeIx>`, which makes the generic argument `'_` invariant
  = note: the struct `NodeTag<'scope, I>` is invariant over the parameter `'scope`
  = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance

error[E0521]: borrowed data escapes outside of closure
  --> tests/compile_fail/cross_scope_node_tags.rs:15:9
   |
 7 |     let node_from_graph1 = graph1.scope_mut(|mut ctx| {
   |         ---------------- `node_from_graph1` declared here, outside of the closure body
...
12 |     graph2.scope_mut(|mut ctx| {
   |                       ------- `ctx` is a reference that is only valid in the closure body
...
15 |         ctx.add_edge("cross", node_from_graph1, n1);
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `ctx` escapes the closure body here
   |
   = note: requirement occurs because of the type `NodeTag<'_, NodeIx>`, which makes the generic argument `'_` invariant
   = note: the struct `NodeTag<'scope, I>` is invariant over the parameter `'scope`
   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance
